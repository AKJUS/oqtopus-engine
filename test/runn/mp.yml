desc: Manual Multi-Programming Job
runners:
  req: https://${USER_API_ENDPOINT}
vars:
  token: ${Q_API_TOKEN}
  device_id: ${DEVICE_ID}
steps:
  post:
    desc: post mp job
    req:
      /v1/jobs:
        post:
          headers:
            q-api-token: "{{ vars.token }}"
          body:
             application/json:
               description: runn test/manual multi-programming job
               device_id: "{{ vars.device_id }}"
               job_info:
                 program:
                 - OPENQASM 3; include "stdgates.inc"; qubit[2] q; bit[2] c; x q[1]; c = measure q;
                 - OPENQASM 3; include "stdgates.inc"; qubit[2] q; bit[2] c; h q[1]; c = measure q;
               job_type: multi_manual
               name: MP
               shots: 1000
               status: submitted
    test: | 
      current.res.status == 200
    dump:
      expr: current.res.body.job_id + "(mp job) is posted"
  wait:
    desc: check job status
    loop:
      count: 20
      until: 'current.res.body.status  == "succeeded" || current.res.body.status  == "failed"'
      minInterval: 5
      maxInterval: 10
    req:
      /v1/jobs/{{steps.post.res.body.job_id}}:
        get:
          headers:
            q-api-token: "{{ vars.token }}"
    dump:
      expr: steps.post.res.body.job_id + "(mp job) is in " + current.res.body.status
  check-status:
    test: |
      steps.wait.res.body.status == "succeeded"
  check-combined-program:
    test: |
      steps.wait.res.body.job_info.combined_program != ""
      && steps.wait.res.body.job_info.combined_program != null
  check-counts:
    test: |
      len(steps.wait.res.body.job_info.result.sampling.counts) > 0
      && len(steps.wait.res.body.job_info.result.sampling.divided_counts) == 2
      && len(steps.wait.res.body.job_info.result.sampling.divided_counts["0"]) > 0
      && len(steps.wait.res.body.job_info.result.sampling.divided_counts["1"]) > 0
