// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: estimation_interface/v1/estimator.proto

package estimation_interfacev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimationJobServiceClient is the client API for EstimationJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimationJobServiceClient interface {
	ReqEstimationPreProcess(ctx context.Context, in *ReqEstimationPreProcessRequest, opts ...grpc.CallOption) (*ReqEstimationPreProcessResponse, error)
	ReqEstimationPostProcess(ctx context.Context, in *ReqEstimationPostProcessRequest, opts ...grpc.CallOption) (*ReqEstimationPostProcessResponse, error)
}

type estimationJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimationJobServiceClient(cc grpc.ClientConnInterface) EstimationJobServiceClient {
	return &estimationJobServiceClient{cc}
}

func (c *estimationJobServiceClient) ReqEstimationPreProcess(ctx context.Context, in *ReqEstimationPreProcessRequest, opts ...grpc.CallOption) (*ReqEstimationPreProcessResponse, error) {
	out := new(ReqEstimationPreProcessResponse)
	err := c.cc.Invoke(ctx, "/estimation_interface.v1.EstimationJobService/ReqEstimationPreProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimationJobServiceClient) ReqEstimationPostProcess(ctx context.Context, in *ReqEstimationPostProcessRequest, opts ...grpc.CallOption) (*ReqEstimationPostProcessResponse, error) {
	out := new(ReqEstimationPostProcessResponse)
	err := c.cc.Invoke(ctx, "/estimation_interface.v1.EstimationJobService/ReqEstimationPostProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimationJobServiceServer is the server API for EstimationJobService service.
// All implementations must embed UnimplementedEstimationJobServiceServer
// for forward compatibility
type EstimationJobServiceServer interface {
	ReqEstimationPreProcess(context.Context, *ReqEstimationPreProcessRequest) (*ReqEstimationPreProcessResponse, error)
	ReqEstimationPostProcess(context.Context, *ReqEstimationPostProcessRequest) (*ReqEstimationPostProcessResponse, error)
	mustEmbedUnimplementedEstimationJobServiceServer()
}

// UnimplementedEstimationJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstimationJobServiceServer struct {
}

func (UnimplementedEstimationJobServiceServer) ReqEstimationPreProcess(context.Context, *ReqEstimationPreProcessRequest) (*ReqEstimationPreProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEstimationPreProcess not implemented")
}
func (UnimplementedEstimationJobServiceServer) ReqEstimationPostProcess(context.Context, *ReqEstimationPostProcessRequest) (*ReqEstimationPostProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqEstimationPostProcess not implemented")
}
func (UnimplementedEstimationJobServiceServer) mustEmbedUnimplementedEstimationJobServiceServer() {}

// UnsafeEstimationJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimationJobServiceServer will
// result in compilation errors.
type UnsafeEstimationJobServiceServer interface {
	mustEmbedUnimplementedEstimationJobServiceServer()
}

func RegisterEstimationJobServiceServer(s grpc.ServiceRegistrar, srv EstimationJobServiceServer) {
	s.RegisterService(&EstimationJobService_ServiceDesc, srv)
}

func _EstimationJobService_ReqEstimationPreProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEstimationPreProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimationJobServiceServer).ReqEstimationPreProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimation_interface.v1.EstimationJobService/ReqEstimationPreProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimationJobServiceServer).ReqEstimationPreProcess(ctx, req.(*ReqEstimationPreProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimationJobService_ReqEstimationPostProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEstimationPostProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimationJobServiceServer).ReqEstimationPostProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/estimation_interface.v1.EstimationJobService/ReqEstimationPostProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimationJobServiceServer).ReqEstimationPostProcess(ctx, req.(*ReqEstimationPostProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimationJobService_ServiceDesc is the grpc.ServiceDesc for EstimationJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimationJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "estimation_interface.v1.EstimationJobService",
	HandlerType: (*EstimationJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqEstimationPreProcess",
			Handler:    _EstimationJobService_ReqEstimationPreProcess_Handler,
		},
		{
			MethodName: "ReqEstimationPostProcess",
			Handler:    _EstimationJobService_ReqEstimationPostProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation_interface/v1/estimator.proto",
}
