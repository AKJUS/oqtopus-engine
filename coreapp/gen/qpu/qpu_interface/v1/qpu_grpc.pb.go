// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: qpu_interface/v1/qpu.proto

package qpu_interfacev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QpuServiceClient is the client API for QpuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QpuServiceClient interface {
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error)
	GetServiceStatus(ctx context.Context, in *GetServiceStatusRequest, opts ...grpc.CallOption) (*GetServiceStatusResponse, error)
	CallJob(ctx context.Context, in *CallJobRequest, opts ...grpc.CallOption) (*CallJobResponse, error)
}

type qpuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQpuServiceClient(cc grpc.ClientConnInterface) QpuServiceClient {
	return &qpuServiceClient{cc}
}

func (c *qpuServiceClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error) {
	out := new(GetDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/qpu_interface.v1.QpuService/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpuServiceClient) GetServiceStatus(ctx context.Context, in *GetServiceStatusRequest, opts ...grpc.CallOption) (*GetServiceStatusResponse, error) {
	out := new(GetServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/qpu_interface.v1.QpuService/GetServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qpuServiceClient) CallJob(ctx context.Context, in *CallJobRequest, opts ...grpc.CallOption) (*CallJobResponse, error) {
	out := new(CallJobResponse)
	err := c.cc.Invoke(ctx, "/qpu_interface.v1.QpuService/CallJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QpuServiceServer is the server API for QpuService service.
// All implementations must embed UnimplementedQpuServiceServer
// for forward compatibility
type QpuServiceServer interface {
	GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error)
	GetServiceStatus(context.Context, *GetServiceStatusRequest) (*GetServiceStatusResponse, error)
	CallJob(context.Context, *CallJobRequest) (*CallJobResponse, error)
	mustEmbedUnimplementedQpuServiceServer()
}

// UnimplementedQpuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQpuServiceServer struct {
}

func (UnimplementedQpuServiceServer) GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedQpuServiceServer) GetServiceStatus(context.Context, *GetServiceStatusRequest) (*GetServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (UnimplementedQpuServiceServer) CallJob(context.Context, *CallJobRequest) (*CallJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallJob not implemented")
}
func (UnimplementedQpuServiceServer) mustEmbedUnimplementedQpuServiceServer() {}

// UnsafeQpuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QpuServiceServer will
// result in compilation errors.
type UnsafeQpuServiceServer interface {
	mustEmbedUnimplementedQpuServiceServer()
}

func RegisterQpuServiceServer(s grpc.ServiceRegistrar, srv QpuServiceServer) {
	s.RegisterService(&QpuService_ServiceDesc, srv)
}

func _QpuService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QpuServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpu_interface.v1.QpuService/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QpuServiceServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QpuService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QpuServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpu_interface.v1.QpuService/GetServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QpuServiceServer).GetServiceStatus(ctx, req.(*GetServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QpuService_CallJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QpuServiceServer).CallJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpu_interface.v1.QpuService/CallJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QpuServiceServer).CallJob(ctx, req.(*CallJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QpuService_ServiceDesc is the grpc.ServiceDesc for QpuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QpuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qpu_interface.v1.QpuService",
	HandlerType: (*QpuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceInfo",
			Handler:    _QpuService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _QpuService_GetServiceStatus_Handler,
		},
		{
			MethodName: "CallJob",
			Handler:    _QpuService_CallJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qpu_interface/v1/qpu.proto",
}
