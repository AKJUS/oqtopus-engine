// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: multiprog_interface/v1/multiprog.proto

package multiprog_interfacev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CircuitCombinerServiceClient is the client API for CircuitCombinerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircuitCombinerServiceClient interface {
	Combine(ctx context.Context, in *CombineRequest, opts ...grpc.CallOption) (*CombineResponse, error)
}

type circuitCombinerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircuitCombinerServiceClient(cc grpc.ClientConnInterface) CircuitCombinerServiceClient {
	return &circuitCombinerServiceClient{cc}
}

func (c *circuitCombinerServiceClient) Combine(ctx context.Context, in *CombineRequest, opts ...grpc.CallOption) (*CombineResponse, error) {
	out := new(CombineResponse)
	err := c.cc.Invoke(ctx, "/multiprog_interface.v1.CircuitCombinerService/Combine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircuitCombinerServiceServer is the server API for CircuitCombinerService service.
// All implementations must embed UnimplementedCircuitCombinerServiceServer
// for forward compatibility
type CircuitCombinerServiceServer interface {
	Combine(context.Context, *CombineRequest) (*CombineResponse, error)
	mustEmbedUnimplementedCircuitCombinerServiceServer()
}

// UnimplementedCircuitCombinerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircuitCombinerServiceServer struct {
}

func (UnimplementedCircuitCombinerServiceServer) Combine(context.Context, *CombineRequest) (*CombineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Combine not implemented")
}
func (UnimplementedCircuitCombinerServiceServer) mustEmbedUnimplementedCircuitCombinerServiceServer() {
}

// UnsafeCircuitCombinerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircuitCombinerServiceServer will
// result in compilation errors.
type UnsafeCircuitCombinerServiceServer interface {
	mustEmbedUnimplementedCircuitCombinerServiceServer()
}

func RegisterCircuitCombinerServiceServer(s grpc.ServiceRegistrar, srv CircuitCombinerServiceServer) {
	s.RegisterService(&CircuitCombinerService_ServiceDesc, srv)
}

func _CircuitCombinerService_Combine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircuitCombinerServiceServer).Combine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiprog_interface.v1.CircuitCombinerService/Combine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircuitCombinerServiceServer).Combine(ctx, req.(*CombineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircuitCombinerService_ServiceDesc is the grpc.ServiceDesc for CircuitCombinerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircuitCombinerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiprog_interface.v1.CircuitCombinerService",
	HandlerType: (*CircuitCombinerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Combine",
			Handler:    _CircuitCombinerService_Combine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiprog_interface/v1/multiprog.proto",
}
