// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: mitigation_interface/mitigation.proto

package mitigation_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrorMitigatorServiceClient is the client API for ErrorMitigatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorMitigatorServiceClient interface {
	ReqMitigation(ctx context.Context, in *MitigateRequest, opts ...grpc.CallOption) (*MitigatedResponse, error)
}

type errorMitigatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorMitigatorServiceClient(cc grpc.ClientConnInterface) ErrorMitigatorServiceClient {
	return &errorMitigatorServiceClient{cc}
}

func (c *errorMitigatorServiceClient) ReqMitigation(ctx context.Context, in *MitigateRequest, opts ...grpc.CallOption) (*MitigatedResponse, error) {
	out := new(MitigatedResponse)
	err := c.cc.Invoke(ctx, "/mitigation.ErrorMitigatorService/ReqMitigation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorMitigatorServiceServer is the server API for ErrorMitigatorService service.
// All implementations must embed UnimplementedErrorMitigatorServiceServer
// for forward compatibility
type ErrorMitigatorServiceServer interface {
	ReqMitigation(context.Context, *MitigateRequest) (*MitigatedResponse, error)
	mustEmbedUnimplementedErrorMitigatorServiceServer()
}

// UnimplementedErrorMitigatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedErrorMitigatorServiceServer struct {
}

func (UnimplementedErrorMitigatorServiceServer) ReqMitigation(context.Context, *MitigateRequest) (*MitigatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqMitigation not implemented")
}
func (UnimplementedErrorMitigatorServiceServer) mustEmbedUnimplementedErrorMitigatorServiceServer() {}

// UnsafeErrorMitigatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorMitigatorServiceServer will
// result in compilation errors.
type UnsafeErrorMitigatorServiceServer interface {
	mustEmbedUnimplementedErrorMitigatorServiceServer()
}

func RegisterErrorMitigatorServiceServer(s grpc.ServiceRegistrar, srv ErrorMitigatorServiceServer) {
	s.RegisterService(&ErrorMitigatorService_ServiceDesc, srv)
}

func _ErrorMitigatorService_ReqMitigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorMitigatorServiceServer).ReqMitigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mitigation.ErrorMitigatorService/ReqMitigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorMitigatorServiceServer).ReqMitigation(ctx, req.(*MitigateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorMitigatorService_ServiceDesc is the grpc.ServiceDesc for ErrorMitigatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorMitigatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mitigation.ErrorMitigatorService",
	HandlerType: (*ErrorMitigatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqMitigation",
			Handler:    _ErrorMitigatorService_ReqMitigation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mitigation_interface/mitigation.proto",
}
